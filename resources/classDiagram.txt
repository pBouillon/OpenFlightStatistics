@startuml

class Airport {
    {method} + {static} Airport(Int airportId, String airportName, String cityName, String countryName, Double latitude, Double longitude)
    {method} + {static} apply(Int airportId, String airportName, String cityName, String countryName, Double latitude, Double longitude) : Airport
    {method} + {static} unapply(airport: Airport): Option[(Int, String, String, String, Double, Double)]

    {field} + airportId : Int
    {field} + airportName : String
    {field} + cityName : String
    {field} + countryName : String
    {field} + latitude : Double
    {field} + longitude : Double
}

HasCoordinates <|.. Airport

class AirportDatabase {
    {method} - {static} AirportDatabase(Map[Int, Airport] airportIdToAirport)
    {method} + {static} loadFromCSV(File inputFile) : AirportDatabase
    {method} + {static} fromList(List[Airport] airports) : AirportDatabase

    {field} + airportIdToAirport : Map[Int, Airport]

    {method} + getAirportById(Int airportId) : Airport
    {method} + apply(Int airportId) : Airport
    {method} + contains(Int airportId) : Boolean
    {method} + contains(Airport airport) : Boolean
    {method} + getSubset(AirportFilter filter) : AirportDatabase
    {method} + getDistanceMap : AirportDistanceMap
    {method} + toList : List[Airport]
    {method} + getDensityIn(Country country, Function[Country, Double] againstWhat) : Double
    {method} + toStringFull: String
}

AirportDatabase o-- Airport
AirportDatabase --> Airport
AirportDatabase --> AirportDatabase
AirportDatabase --> Country

class AirportDistanceMap {
    {field} + {static} EmptyMapSoNoValue : Double

    {method} + {static} AirportDistanceMap(AirportDatabase)

    {field} - airportDatabase : AirportDatabase
    {field} - pairsNumber : Int
    {field} - sortedDistances : List[Double]

    {method} + containsPairs : Boolean
    {method} + minDistance : Double
    {method} + maxDistance : Double
    {method} + avgDistance : Double
    {method} + medianDistance : Double
    {method} + stdDev : Double
    {method} + apply(Int airportIdA, Int airportIdB) : Double
    {method} + apply (Airport airportA, Airport airportB) : Double
    {method} + getDistanceBetween(Int airportIdA, Int airportIdB) : Double
    {method} + getDistanceBetween(Airport, Airport) : Double
}

AirportDistanceMap *-- AirportDatabase
AirportDistanceMap --> Airport

class Country {
    {method} + {static} Country(String countryName, Long inhabitants, Double surface)
    {method} + {static} apply(String countryName, Long inhabitants, Double surface) : Country
    {method} + {static} unapply(country: Country) : Option[(String, Long, Double)]

    + {field} countryName : String
    + {field} inhabitants : Long
    + {field} surface : Double
}

class CountryDatabase {
    {method} - {static} CountryDatabase(Map[String, Country] countryNameToCountry)
    {method} + {static} loadFromCSV(File inputFile) : CountryDatabase
    {method} + {static} fromList(List[Country] countries) : CountryDatabase

    {field} + countryNameToCountry : Map[String, Country]

    + {method} getCountryByName(String countryName) : Country
    + {method} apply(String countryName) : Country
    + {method} contains(String countryName) : Boolean
    + {method} contains(Country country) : Boolean
    + {method} toList : List[Country]
    + {method} toStringFull : String
}

CountryDatabase *-- Country
CountryDatabase --> Country

abstract class AirportFilter {
    {method} + {static} fancyWrap(String constraintsRepr) : String

    {method} + {abstract} constraintsRepr : String
    {method} + {abstract} accepts(Airport candidate) : Boolean

    {method} + rejects(Airport candidate) : Boolean
    {method} + unary_! : AirportFilter
    {method} + ||(AirportFilter that) : AirportFilter
    {method} + &&(AirportFilter that) : AirportFilter
}

AirportFilter --> Airport

class All << (O,#FF7700) Object >> {
    {method} + accepts(Airport candidate) : Boolean
    {method} + constraintsRepr : String
}

AirportFilter <|-- All
All --> Airport

class Around {
    {method} - {static} Around(Point center, Double radius)
    {method} + {static} apply(HasCoordinates center, Double radius) : Around
    {method} + {static} unapply(Around around) : Option[(Point, Double)]

    {field} + center : Point
    {field} + radius : Double

    {method} + accepts(Airport candidate) : Boolean
    {method} + constraintsRepr : String
}

AirportFilter <|-- Around
Around --> Point
Around --> HasCoordinates
Around --> Airport

class CountryNames{
    {method} + {static} CountryNames(List[String] countryNames)
    {method} + {static} apply(List[String] countryNames) : CountryNames
    {method} + {static} apply(String* countryNames) : CountryNames
    {method} + {static} unapply(CountryNames countryNamesFilter) : Option[List[String]]

    {field} + countryNames: List[String]

    {method} + accepts(Airport candidate) : Boolean
    {method} + constraintsRepr : String
}

AirportFilter <|-- CountryNames
CountryNames --> Airport

enum HemisphereChoice {
    Northern
    Southern
}

class Hemisphere {
    {method} + {static} Hemisphere(HemisphereChoice choice)
    {method} + {static} apply(HemisphereChoice choice): Hemisphere
    {method} + {static} unapply(Hemisphere hemisphereFilter) : Option[HemisphereChoice]

    {field} + choice : HemisphereChoice

    {method} + accepts(Airport candidate) : Boolean
    {method} + constraintsRepr : String
}

AirportFilter <|-- Hemisphere
Hemisphere --> HemisphereChoice
Hemisphere *-- HemisphereChoice
Hemisphere --> Airport

class Window {
    {method} - {static} Window(Point bottomLeft, Point topRight)
    {method} + {static} apply(HasCoordinates coordA, HasCoordinates coordB) : Window
    {method} + {static} unapply(Window windowFilter) : Option[(Point, Point)]

    {field} + bottomLeft : Point
    {field} + topRight : Point

    {method} + accepts(Airport candidate) : Boolean
    {method} + constraintsRepr : String
}

AirportFilter <|-- Window
Window --> Point
Window --> HasCoordinates
Window *-- Point
Window --> Airport

interface HasCoordinates {
    {field} + {abstract} latitude : Double
    {field} + {abstract} longitude : Double

    {method} + toPoint : Point
}

HasCoordinates --> Point

class Point {
    {method} + {static} Point (Double latitude, Double longitude)
    {method} + {static} apply(Double latitude, Double longitude) : Point
    {method} + {static} unapply(Point point) : Option[(Double, Double)]

    {field} + latitude : Double
    {field} + longitude : Double
}

HasCoordinates <|.. Point

abstract class BackmapProvider {
    {method} + {abstract} provide(Projector projector, Int width) : BufferedImage
}

BackmapProvider --> Projector

class D3BackmapProvider {
    {method} + {static} D3BackmapProvider(String rawApiUrl, Option[String] style, Option[String] customMapJsonDataUrl)

    {field} - style : Option[String]
    {field} - customMapJsonDataUrl : Option[String]
    {field} + apiUrl : String

    {method} + provide(Projector projector, Int width) : BufferedImage
    {method} - requestBuilder(Int width, Int height, Double centerLatitude, Double centerLongitude, Projector projector) : String
}

BackmapProvider <|-- D3BackmapProvider
D3BackmapProvider --> Projector

abstract class Projector {
    {field} + {abstract} center : Point

    {method} + {abstract} name : String
    {method} + {abstract} description : String
    {method} + {abstract} ratioWidthHeight : Double
    {method} + {abstract} projects(HasCoordinates obj, Int width) : ProjectedPoint
}

Projector *-- Point
Projector --> HasCoordinates
Projector --> ProjectedPoint

class EquiRectangularProjector {
    {method} + {static} EquiRectangularProjector(HasCoordinates centerRaw)

    {field} - rotator : Function[HasCoordinates, Point]
    {field} + center : Point
    {field} + name : String
    {field} + description : String
    {field} + ratioWidthHeight : Double
    {method} + projects(HasCoordinates obj, Int width) : ProjectedPoint
}

Projector <|-- EquiRectangularProjector
EquiRectangularProjector *-- Point
EquiRectangularProjector --> HasCoordinates
EquiRectangularProjector --> Point
EquiRectangularProjector --> ProjectedPoint

class EquiRectangularLat0Projector {
    {method} + {static} EquiRectangularLat0Projector(HasCoordinates centerRaw)

    {field} - rotator : Function[HasCoordinates, Point]
    {field} + center : Point
    {field} + name : String
    {field} + description : String
    {field} + ratioWidthHeight : Double
    {method} + projects(HasCoordinates obj, Int width) : ProjectedPoint
}

Projector <|-- EquiRectangularLat0Projector
EquiRectangularLat0Projector *-- Point
EquiRectangularLat0Projector --> HasCoordinates
EquiRectangularLat0Projector --> Point
EquiRectangularLat0Projector --> ProjectedPoint

enum Filling {
    Filled
    Outline(Float width)
}

abstract class Marker {
    {field} + {abstract} color : Color
    {field} + {abstract} filling : Filling

    {method} + {abstract} shapeFactory(Double xCenter, Double yCenter) : Shape
    {method} + putAt(Graphics2D brush, Double x, Double y): Unit
}

Marker *-- Filling
Marker --> Filling

class Rectangle {
    {method} + {static} Rectangle(Color color, Filling filling, Double width, Double height)
    {method} + {static} apply(Color color, Filling filling, Double width, Double height) : Rectangle
    {method} + {static} unapply(Rectangle rectangleMarker) : Option[(Color, Filling, Double, Double)]

    {field} + color : Color
    {field} + filling : Filling
    {field} + width : Double
    {field} + height : Double

    {method} + shapeFactory(Double xCenter, double yCenter) : Shape
}

Marker <|-- Rectangle
Rectangle *-- Filling
Rectangle --> Filling


class Round {
    {method} + {static} Round(Color color, Filling filling, Double radius)
    {method} + {static} apply(Color color, Filling filling, Double radius) : Round
    {method} + {static} unapply(Round roundMarker) : Option[(Color, Filling, Double)]

    {field} + color : Color
    {field} + filling : Filling
    {field} + radius : Double

    {method} + shapeFactory(Double xCenter, double yCenter) : Shape
}

Marker <|-- Round
Round *-- Filling
Round --> Filling

class Square {
    {method} + {static} Square(Color color, Filling filling, Double size)
    {method} + {static} apply(Color color, Filling filling, Double size) : Square
    {method} + {static} unapply(Square squareMarker) : Option[(Color, Filling, Double)]

    {field} + color : Color
    {field} + filling : Filling
    {field} + size : Double

    {method} + shapeFactory(Double xCenter, double yCenter) : Shape
}

Marker <|-- Square
Square *-- Filling
Square --> Filling

class MapCreator {
    {method} + {static} MapCreator(Projector projector, BackmapProvider backmapProvider, Int width)

    {field} - projector : Projector
    {field} - backmapProvider : BackmapProvider
    {field} - width : Int
    {field} - image : BufferedImage
    {field} - brush : Graphics2D

    {method} + plotObject(HasCoordinates obj, Marker marker) : Unit
    {method} + plotAll(AirportDatabase airportDatabase, Marker marker) : Unit
    {method} + saveToFile(File outputFile) : Unit
}

MapCreator *-- Projector
MapCreator --> Projector
MapCreator *-- BackmapProvider
MapCreator --> BackmapProvider
MapCreator --> HasCoordinates
MapCreator --> Marker
MapCreator --> AirportDatabase

abstract class ProjectedPoint {

}

class OutOfMap << (O,#FF7700) Object >> {
}

ProjectedPoint <|-- OutOfMap

class OnMap {
    {method} + {static} OnMap(Double x, Double y)
    {method} + {static} apply(Double x, Double y) : OnMap
    {method} + {static} unapply(OnMap onMap) : Option[(Double, Double)]

    {field} + x : Double
    {field} + y : Double
}

ProjectedPoint <|-- OnMap

@enduml
