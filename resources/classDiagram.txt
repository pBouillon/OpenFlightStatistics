@startuml

class Airport {
	+ airportId : Int
	+ name : String
	+ city : String
	+ countryName : String
	+ latitude : Double
	+ longitude : Double
	+ Airport(Int airportId, String name, String city, String countryName, Double longitude, Double longitude)
	+ {static} distance(Airport airportA, Airport airportB) : Double
}

class AirportDatabase {
	{field} - airportIdToAirport : Map[Int, Airport]
	+ {static} loadFromCSV(File inputFile) : AirportDatabase
	+ {static} fromList(List[Airport] airports) : AirportDatabase
	- AirportDatabase(Map[Int, Airport] airportIdToAirport)
	+ getAirportById(Int airportId) : Airport
	+ apply(Int airportId) : Airport
	+ contains(Int airportId) : Boolean
	+ contains(Airport airport) : Boolean
	+ getSubset(AirportFilter filter) : AirportDatabase
	+ getDistanceMap() : AirportDistanceMap
	+ toList() : List[Airport]
	+ getDensityIn(Country country, (Country, Double) againstWhat) : Double
}

class AirportDistanceMap {
	{field} - airportIdToAirport : Map[Int, Airport)]
	{field} - airportIdsToDist : Map[[Int, Int], Double]
	{field} - noDupAirportRecords : Map[[Int, Int], Double]
	{field} - noDupSortedDistances : List[Double]
	{field} - noDupLength: Int
	+ AirportDistanceMap(Map[Int, Airport] airportIdToAirport, Map[[Int, Int], Double] airportIdsToDist)
	+ minDistance() : Double
	+ maxDistance() : Double
	+ avgDistance() : Double
	+ medianDistance() : Double
	+ stdDev() : Double
	+ apply(Int airportIdA, Int airportIdB) : Double
	+ apply (Airport airportA, Airport airportB) : Double
}

class Country {
	+ countryName : String
	+ inhabitants : Long
	+ surface : Double
	+ Country(String countryName, Long inhabitants, Double surface)
}

class CountryDatabase {
	{field} - countryNameToCountry : Map[String, Country]
	+ {static} loadFromCSV(File inputFile) : CountryDatabase
	+ {static} fromList(List[Country] countries) : CountryDatabase
	- CountryDatabase(Map[String, Country] countryNameToCountry)
	+ getCountryByName(String countryName) : Country
	+ apply(String countryName) : Country
	+ contains(String countryName) : Boolean
	+ contains(Country country) : Boolean
	+ toList() : List[Country]
}

interface AirportFilter {
	+ accepts(Airport candidate) : Boolean
	+ rejects(Airport candidate) : Boolean
	+ unary_!() : AirportFilter
	+ ||(AirportFilter that) : AirportFilter
	+ &&(AirportFilter that) : AirportFilter
}

class CountryNames{
	{field} + countryNames: List[String]
	+ accepts(Airport candidate) : Boolean
	+ CountryNames(List[String] countryNames)
}

class All << (S,#FF7700) Singleton >> {
	+ accepts(Airport candidate) : Boolean
}

enum HemisphereChoice {
	NORTH
	SOUTH
}

class Hemisphere {
	+ Hemisphere(HemisphereChoice choice)
}


AirportFilter <|-- All
AirportFilter <|-- CountryNames
AirportFilter <|-- Hemisphere
Hemisphere ..> HemisphereChoice

Airport o-- AirportDatabase
Airport o-- AirportDistanceMap
AirportDatabase ..> AirportDistanceMap
AirportDatabase ..> AirportFilter
AirportDatabase ..> Country

Country o-- CountryDatabase
Airport o-- AirportFilter

@enduml
